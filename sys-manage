#!/usr/bin/env bash
# Bash for maximum portability.

# Apparently this bit of code figures out where the script lives.
# http://stackoverflow.com/a/246128/264895

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

cd "$DIR"

# Helper for determining if things are installed.
is_available () {
    which $1 2>&1 > /dev/null
}

command=$1

if [[ -z "$XDG_CONFIG_HOME" ]]; then
    echo "XDG_CONFIG_HOME unset, assuming '$HOME/.config'."
    XDG_CONFIG_HOME="$HOME/.config"
fi

link () {
    echo "Linking dotfiles…"

    if [[ ! -e "$XDG_CONFIG_HOME" ]]; then
        echo "Creating XDG_CONFIG_HOME ($XDG_CONFIG_HOME)."
        mkdir -p "$XDG_CONFIG_HOME"
    fi

    for file in `find $DIR/dotfiles/* -maxdepth 1 -prune`; do
        if [[ -d $file ]]; then
            dest="$XDG_CONFIG_HOME/$(basename "${file}")" # Directories go under XDG_CONFIG_HOME
        else
            dest="$HOME/.$(basename "${file}")" # Other files are linked as hidden, directly into $HOME
        fi

        if [[ -h $dest ]]; then
            echo "'$dest' is a symbolic link, overwriting."
            echo "   (was linked to '$(readlink "$dest")'.)"
            rm "$dest"
        elif [[ -e $dest ]]; then
            echo "'$dest' exists, moving to '$dest.back'."
            if [[ -f "$dest.back" ]]; then
                echo "    …which also exists. Sigh. Skipping this one, re-run to try again."
                continue
            fi
            mv "$dest" "$dest.back"
        else
            echo "Linking '$dest'."
        fi

        ln -s "$file" "$dest"
    done
}

revert() {
    echo "Resetting dotfiles…"
    echo "(Note that this will only restore any .back files that you've left in place.)"
    
    for file in `find $DIR/dotfiles/* -maxdepth 1 -prune`; do
        if [[ -d $file ]]; then
            dest="$XDG_CONFIG_HOME/$(basename "${file}")" # Directories go under XDG_CONFIG_HOME
        else
            dest="$HOME/.$(basename "${file}")" # Other files are linked as hidden, directly into $HOME
        fi

        if [[ -h $dest ]]; then
            echo "Unlinking $dest."
            unlink $dest

            if [[ -f "$dest.back" ]]; then
                echo "    …reverting to $dest.back."
                mv "$dest.back" "$dest"
            fi
        fi
    done

    echo "Dotfiles reverted."
}

import () {
    if [[ "$#" -eq 0 ]]; then
        echo "This command takes one or more arguments, the configurations you wish to import."
        echo "You want to import everything? No you don't. Type them out, dammit."
    else
        echo "Importing dotfiles…"
    fi

    for file in "$@"; do
        target="$XDG_CONFIG_HOME/${file}"

        if [[ -h "$target" ]]; then
            echo "$target is already a symlink. Skipping."
        elif [[ -e "$target" ]]; then
            echo "Importing '$target'."
            mv "$target" "$DIR/dotfiles/$file"
            ln -s "$DIR/dotfiles/$file" "$target"
        fi
    done
}

install () {
    sudo -v
    sudo -n true 2>/dev/null || exit # Check if we were actually granted sudo access.

    # Keep-alive: update existing sudo time stamp if set, otherwise do nothing.
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

    case "$(uname)" in
        Darwin*)
            install_osx
            ;;
    esac
}

install_osx () {
    echo "Installing OS X toolchain."

    xcode-select --install 2>&1 > /dev/null || echo "Xcode CLI tools are already installed."
    is_available brew && echo "Homebrew is already installed." || ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    brew tap-info homebrew/bundle 2>&1 > /dev/null && echo "homebrew-bundle is already tapped." || brew tap homebrew/bundle # Tap bundle to read the Brewfile
    brew bundle check --global 2>&1 > /dev/null && echo "All formulae are already installed." || brew bundle --verbose --global # Install everything
}

configure () {
    chsh -s $(which zsh)
}

pull () {
    cd $DIR
    echo "Pulling latest System configuration…"
    git pull origin master
}

# Note that this is a really terrible way to run the command, but I'm lazy. It'll get changed as soon as it annoys me.
$command "${@:2}"
