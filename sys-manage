#!/usr/bin/env bash
# Bash for maximum portability.

# Apparently this bit of code figures out where the script lives.
# http://stackoverflow.com/a/246128/264895

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

command=$1

link () {
    echo "Linking dotfiles..."
    for source in `find $DIR/dotfiles/* -maxdepth 1 -prune`; do
        dest="$HOME/.`basename ${source}`"

        if [[ -h $dest ]]; then
            echo "$dest is a symbolic link, overwriting."
            rm "$dest"
        elif [[ -f $dest ]]; then
            echo "$dest exists, moving to $dest.back."
            if [[ -f "$dest.back" ]]; then
                echo "    ...which also exists. Sigh. Skipping this one, re-run to try again."
                continue
            fi
            mv "$dest" "$dest.back"
        else
            echo "Linking $dest."
        fi

        ln -s $source $dest
    done
}

revert() {
    echo "Resetting dotfiles..."
    echo "(Note that this will only restore any .back files that you've left in place.)"
    
    for source in `find $DIR/dotfiles/* -maxdepth 1 -prune`; do
        dest="$HOME/.`basename ${source}`"
        if [[ -h $dest ]]; then
            echo "Unlinking $dest."
            unlink $dest
            if [[ -f "$dest.back" ]]; then
                echo "    ...reverting to $dest.back."
                mv "$dest.back" "$dest"
            fi
        fi
    done

    echo "Dotfiles reverted."
}

install () {
    echo "This doesn't work yet, but it will automatically install homebrew and such."
}

configure () {
    chsh -s $(which zsh)
}

push () {
    if [[ -z $1 ]]; then
        echo "You probably want a commit message on there."
        exit 1
    fi

    cd $DIR
    git status
    echo
    echo "Commit message: $1"
    
    echo "So, everything look good?"
    while true; do
        read yn
        case $yn in
            [yY]* ) break;;
            [nN]* ) exit;;
            * ) echo "Please answer y or n.";;
        esac
    done
    echo "Committing and pushing..."

    git add -A && git commit -m "$1" && git push origin master
}

pull () {
    cd $DIR
    echo "Pulling latest System configuration..."
    git pull origin master
}

# Note that this is a really dumb way to run the command, but I'm lazy. It'll get changed as soon as it annoys me.
$command "$2"
