#!/usr/bin/env node

if (process.argv.length < 3) {
    console.log("usage: sys_manage [-f] [-t target_dir] command");
    console.log("At the moment, the only command is `install`.");
    process.exit(1);
}

var flags = {};
var command = "";

for (var i = 2; i < process.argv.length; ++i) {
    var thing = process.argv[i];

    if (thing.indexOf("-") === 0) {
        flags[thing.substring(1)] = (process.argv[i+1].indexOf("-") === 0) ? process.argv[++i] : "";
    } else {
        command = thing;
        break;
    }
}

var fs = require("fs");
var path = require("path");

var symlinkFile = function(linkPath, realPath) {
    if (fs.existsSync(linkPath)) {
        var linkStats = fs.lstatSync(linkPath);
        if (linkStats.isSymbolicLink()) {
            console.log(linkPath + " is a symbolic link, overwriting.");
         } else {
            console.log(linkPath + " exists! Moving to " + linkPath + ".back…");
            if (fs.existsSync(linkPath + ".back")) {
                console.log("…which also exists. Sigh. Skipping this file, fix it up and re-run to install it.");
                return;
            } else {
                fs.renameSync(linkPath, linkPath + ".back");
            }
        }
    }

    fs.symlinkSync(realPath, linkPath);
};

var installFiles = function(target) {
    if (!fs.existsSync(target)) fs.mkdirSync(target);

    var children = fs.readdirSync(path("dotfiles"));
    for (var index in children) {
        var thing = children[index];

        if (thing.indexOf(".") === 0) continue;
        var realPath = path.resolve("dotfiles", thing);
        var stats = fs.statSync(realPath);
        
        if (!(stats.isFile() || stats.isDirectory())) continue;

        var linkPath = path.resolve(target, "." + thing);

        symlinkFile(linkPath, realPath);
    }
};

// Actually do something now.

if (command === "install") {
    installFiles(path(flags["t"] || process.env.HOME));
}
